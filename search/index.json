[{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 fun parseOptions(args: List\u0026lt;String\u0026gt;): HashMap\u0026lt;String, String?\u0026gt; { val options = hashMapOf\u0026lt;String, String?\u0026gt;() var i = 0 while (i \u0026lt; args.size) { val arg = args[i] if (arg.startsWith(\u0026#34;--\u0026#34;) || arg.startsWith(\u0026#34;-\u0026#34;)) { val (key, value) = if (arg.contains(\u0026#34;=\u0026#34;)) { val splitArg = arg.split(\u0026#34;=\u0026#34;, limit = 2) val key = splitArg[0].removePrefix(\u0026#34;-\u0026#34;).removePrefix(\u0026#34;-\u0026#34;) val value = splitArg[1] key to value } else { val key = arg.removePrefix(\u0026#34;-\u0026#34;).removePrefix(\u0026#34;-\u0026#34;) val value = if (i + 1 \u0026lt; args.size \u0026amp;\u0026amp; !args[i + 1].startsWith(\u0026#34;-\u0026#34;)) args[++i] else null key to value } options[key] = value } i++ } return options } 1 2 3 4 5 6 7 8 9 10 11 fun parseContentAfterSpace(args: List\u0026lt;String\u0026gt;): String { var i = 0 var content = \u0026#34;\u0026#34; while (i \u0026lt; args.size) { val arg = args[i] if (arg.startsWith(\u0026#34;--\u0026#34;) || arg.startsWith(\u0026#34;-\u0026#34;)) break else content += \u0026#34; $arg\u0026#34; i++ } return content } ","date":"2024-11-05T00:00:00Z","image":"https://cpjinan.github.io/Blog/p/1/kotlin_hu9583548857518962156.png","permalink":"https://cpjinan.github.io/Blog/p/1/","title":"\u003cBukkit 插件开发笔记 Chapter.1\u003e 命令参数解析"}]